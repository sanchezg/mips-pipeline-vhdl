--------------------------------------------------------------------------------
-- Copyright (c) 1995-2007 Xilinx, Inc.
-- All Right Reserved.
--------------------------------------------------------------------------------
--   ____  ____ 
--  /   /\/   / 
-- /___/  \  /    Vendor: Xilinx 
-- \   \   \/     Version : 9.2i
--  \   \         Application : ISE
--  /   /         Filename : testdecod.ant
-- /___/   /\     Timestamp : Sat Dec 17 16:26:53 2011
-- \   \  /  \ 
--  \___\/\___\ 
--
--Command: 
--Design Name: testdecod
--Device: Xilinx
--

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
USE IEEE.STD_LOGIC_TEXTIO.ALL;
USE STD.TEXTIO.ALL;

ENTITY testdecod IS
END testdecod;

ARCHITECTURE testbench_arch OF testdecod IS
    FILE RESULTS: TEXT OPEN WRITE_MODE IS "C:\Users\1\Documents\Materias\mips-pipeline-svn\testdecod.ano";

    COMPONENT instruction_decode
        PORT (
            clk : In std_logic;
            reset : In std_logic;
            EscrReg : In std_logic;
            Escr_reg : In std_logic_vector (4 DownTo 0);
            IDEXLeerMem : In std_logic;
            IDEX_RT : In std_logic_vector (4 DownTo 0);
            Escr_IFID : Out std_logic;
            Escr_PC : Out std_logic;
            instruccion : In std_logic_vector (31 DownTo 0);
            Escr_data : In std_logic_vector (31 DownTo 0);
            sumador_in : In std_logic_vector (31 DownTo 0);
            dato_1 : Out std_logic_vector (31 DownTo 0);
            dato_2 : Out std_logic_vector (31 DownTo 0);
            ext_sign : Out std_logic_vector (31 DownTo 0);
            sumador : Out std_logic_vector (31 DownTo 0);
            inst20_16 : Out std_logic_vector (4 DownTo 0);
            inst15_11 : Out std_logic_vector (4 DownTo 0);
            inst25_21 : Out std_logic_vector (4 DownTo 0);
            EX : Out std_logic_vector (3 DownTo 0);
            M : Out std_logic_vector (2 DownTo 0);
            WB : Out std_logic_vector (1 DownTo 0)
        );
    END COMPONENT;

    SIGNAL clk : std_logic := '0';
    SIGNAL reset : std_logic := '0';
    SIGNAL EscrReg : std_logic := '0';
    SIGNAL Escr_reg : std_logic_vector (4 DownTo 0) := "00000";
    SIGNAL IDEXLeerMem : std_logic := '0';
    SIGNAL IDEX_RT : std_logic_vector (4 DownTo 0) := "00000";
    SIGNAL Escr_IFID : std_logic := '0';
    SIGNAL Escr_PC : std_logic := '0';
    SIGNAL instruccion : std_logic_vector (31 DownTo 0) := "00000000000000000000000000000000";
    SIGNAL Escr_data : std_logic_vector (31 DownTo 0) := "00000000000000000000000000000000";
    SIGNAL sumador_in : std_logic_vector (31 DownTo 0) := "00000000000000000000000000000000";
    SIGNAL dato_1 : std_logic_vector (31 DownTo 0) := "00000000000000000000000000000000";
    SIGNAL dato_2 : std_logic_vector (31 DownTo 0) := "00000000000000000000000000000000";
    SIGNAL ext_sign : std_logic_vector (31 DownTo 0) := "00000000000000000000000000000000";
    SIGNAL sumador : std_logic_vector (31 DownTo 0) := "00000000000000000000000000000000";
    SIGNAL inst20_16 : std_logic_vector (4 DownTo 0) := "00000";
    SIGNAL inst15_11 : std_logic_vector (4 DownTo 0) := "00000";
    SIGNAL inst25_21 : std_logic_vector (4 DownTo 0) := "00000";
    SIGNAL EX : std_logic_vector (3 DownTo 0) := "0000";
    SIGNAL M : std_logic_vector (2 DownTo 0) := "000";
    SIGNAL WB : std_logic_vector (1 DownTo 0) := "00";

    SHARED VARIABLE TX_ERROR : INTEGER := 0;
    SHARED VARIABLE TX_OUT : LINE;

    constant PERIOD : time := 200 ns;
    constant DUTY_CYCLE : real := 0.5;
    constant OFFSET : time := 100 ns;

    BEGIN
        UUT : instruction_decode
        PORT MAP (
            clk => clk,
            reset => reset,
            EscrReg => EscrReg,
            Escr_reg => Escr_reg,
            IDEXLeerMem => IDEXLeerMem,
            IDEX_RT => IDEX_RT,
            Escr_IFID => Escr_IFID,
            Escr_PC => Escr_PC,
            instruccion => instruccion,
            Escr_data => Escr_data,
            sumador_in => sumador_in,
            dato_1 => dato_1,
            dato_2 => dato_2,
            ext_sign => ext_sign,
            sumador => sumador,
            inst20_16 => inst20_16,
            inst15_11 => inst15_11,
            inst25_21 => inst25_21,
            EX => EX,
            M => M,
            WB => WB
        );

        PROCESS    -- clock process for clk
        BEGIN
            WAIT for OFFSET;
            CLOCK_LOOP : LOOP
                clk <= '0';
                WAIT FOR (PERIOD - (PERIOD * DUTY_CYCLE));
                clk <= '1';
                WAIT FOR (PERIOD * DUTY_CYCLE);
            END LOOP CLOCK_LOOP;
        END PROCESS;

        PROCESS    -- Annotation process for clk
            VARIABLE TX_TIME : INTEGER := 0;

            PROCEDURE ANNOTATE_Escr_IFID(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", Escr_IFID, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, Escr_IFID);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_Escr_PC(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", Escr_PC, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, Escr_PC);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_dato_1(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", dato_1, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, dato_1);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_dato_2(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", dato_2, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, dato_2);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_ext_sign(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", ext_sign, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, ext_sign);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_sumador(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", sumador, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, sumador);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_inst20_16(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", inst20_16, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, inst20_16);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_inst15_11(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", inst15_11, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, inst15_11);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_inst25_21(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", inst25_21, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, inst25_21);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_EX(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", EX, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, EX);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_M(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", M, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, M);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_WB(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", WB, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, WB);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
        BEGIN
            WAIT for 1 fs;
            ANNOTATE_Escr_IFID(0);
            ANNOTATE_Escr_PC(0);
            ANNOTATE_dato_1(0);
            ANNOTATE_dato_2(0);
            ANNOTATE_ext_sign(0);
            ANNOTATE_sumador(0);
            ANNOTATE_inst20_16(0);
            ANNOTATE_inst15_11(0);
            ANNOTATE_inst25_21(0);
            ANNOTATE_EX(0);
            ANNOTATE_M(0);
            ANNOTATE_WB(0);
            WAIT for OFFSET;
            TX_TIME := TX_TIME + 100;
            ANNO_LOOP : LOOP
                --Rising Edge
                WAIT for 115 ns;
                TX_TIME := TX_TIME + 115;
                ANNOTATE_Escr_IFID(TX_TIME);
                ANNOTATE_Escr_PC(TX_TIME);
                ANNOTATE_dato_1(TX_TIME);
                ANNOTATE_dato_2(TX_TIME);
                ANNOTATE_ext_sign(TX_TIME);
                ANNOTATE_sumador(TX_TIME);
                ANNOTATE_inst20_16(TX_TIME);
                ANNOTATE_inst15_11(TX_TIME);
                ANNOTATE_inst25_21(TX_TIME);
                ANNOTATE_EX(TX_TIME);
                ANNOTATE_M(TX_TIME);
                ANNOTATE_WB(TX_TIME);
                WAIT for 85 ns;
                TX_TIME := TX_TIME + 85;
            END LOOP ANNO_LOOP;
        END PROCESS;

        PROCESS
            BEGIN
                -- -------------  Current Time:  100ns
                WAIT FOR 100 ns;
                reset <= '1';
                -- -------------------------------------
                -- -------------  Current Time:  185ns
                WAIT FOR 85 ns;
                reset <= '0';
                EscrReg <= '1';
                Escr_reg <= "00001";
                Escr_data <= "00000000000000000000000000000101";
                -- -------------------------------------
                -- -------------  Current Time:  385ns
                WAIT FOR 200 ns;
                EscrReg <= '0';
                -- -------------------------------------
                -- -------------  Current Time:  585ns
                WAIT FOR 200 ns;
                Escr_reg <= "00000";
                Escr_data <= "00000000000000000000000000000000";
                -- -------------------------------------
                -- -------------  Current Time:  785ns
                WAIT FOR 200 ns;
                instruccion <= "00000000010000010111000000100101";
                -- -------------------------------------
                WAIT FOR 2415 ns;

                STD.TEXTIO.write(TX_OUT, string'("Total[]"));
                STD.TEXTIO.writeline(RESULTS, TX_OUT);
                ASSERT (FALSE) REPORT
                    "Success! Simulation for annotation completed"
                    SEVERITY FAILURE;
            END PROCESS;

    END testbench_arch;

